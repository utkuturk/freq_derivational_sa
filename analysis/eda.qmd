---
title: "Descriptive Plots"
author: Eva, Utku, Özge
format:
  html:
    self-contained: true  # ensures everything is embedded, no extra folders
    embed-resources: true
    fig-width: 12
    smooth-scroll: true
    code-copy: true
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    toc: true             # adds table of contents
    toc-location: left    # optional: move TOC to left side
    toc-depth: 3          # optional: control how deep the TOC goes
    number-sections: true # adds numbering to sections
    theme: flatly          # or use another Bootstrap theme like journal, flatly, etc.
    highlight-style: a11y # accessible syntax highlighting
    # css: styles.css       # optional: your custom CSS if needed
---


## Setup: load packages and scripts and data


```{r, warning=FALSE, message=FALSE}
# packages
invisible(lapply(c("dplyr", "ggplot2", "tidyr", "readr", "purrr", "stringr", "knitr", "brms", "tidybayes", "loo"), library, character.only = TRUE))


# load scripts
invisible(lapply(list.files("./scripts", "\\.R$", full.names = TRUE), source))

# load data
exp <- read_csv("./data/exp_data.csv") 
filler_q <- read_csv("./data/filler_q.csv")
filler_scale <- read_csv("./data/filler_scale.csv")
```

## Overall Rating Counts by Condition

```{r, warning=FALSE, message=FALSE}
exp <- exp %>%
  mutate(
    suffix = factor(suffix, levels = sort(unique(suffix))),
    is_sa = factor(is_sa, levels = c(0, 1), labels = c("Not Suspended", "Suspended")),
    rating = factor(rating, levels = sort(unique(rating), decreasing = TRUE))
  )

summary_data <- exp %>%
  count(suffix, is_sa, rating, name = "count")

ggplot(summary_data, aes(x = is_sa, y = count, fill = rating)) +
  geom_bar(stat = "identity", position = "fill", color = "black", width = 0.8) +
  geom_text(
    aes(label = rating),
    stat = "identity",
    position = position_fill(vjust = 0.5),
    color = "white", fontface = "bold", size = 4
  ) +
  scale_fill_brewer(palette = "Spectral", direction = 1) + 
  scale_y_continuous(labels = NULL, breaks = NULL) +
  labs(
    x = "Suspension",
    y = NULL,
    fill = "Rating",
    title = "Cumulative Rating Distribution by Suspension and Suffix"
  ) +
  facet_wrap(~ suffix, ncol= 4) +
  theme_minimal() +
  theme(
    legend.position = "right",
    axis.text.x = element_text(size = 12, face = "bold"),
    axis.text.y = element_blank(),
    axis.title.x = element_text(size = 13, face = "bold"),
    plot.title = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 12, face = "bold")
  )

```


## Overall Rating Means by Condition

**Beware that I am treating ordinal values continuous, this is just to give you an idea**

```{r, warning=FALSE, message=FALSE}
summary_df <- exp %>%
  group_by(suffix, is_sa) %>%
  summarise(
    mean_rating = mean(as.numeric(as.character(rating)), na.rm = TRUE),
    se = sd(as.numeric(as.character(rating)), na.rm = TRUE) / sqrt(n()),
    n = n(),
    .groups = "drop"
  ) %>%
  mutate(ci = 1.96 * se)

ggplot(summary_df, aes(x = suffix, y = mean_rating, group = factor(is_sa),
                       shape = factor(is_sa), linetype = factor(is_sa))) +
  geom_point(position = position_dodge(width = 0.3), size = 3) +
  geom_errorbar(aes(ymin = mean_rating - ci, ymax = mean_rating + ci),
                position = position_dodge(width = 0.3), width = 0.2) +
  labs(x = "Suffix", y = "Mean Rating", shape = "Suspended", linetype = "Suspended") +
  theme_minimal()
```

## Rating ~ Frequency 

```{r, warning=FALSE, message=FALSE}

freq <- read_csv("../freqs_for_analysis.csv")

exp_joined <- exp %>%
  rowwise() %>%
  mutate(matched = list(
    freq %>% filter(str_detect(item, str_c("\\b", conj1, "\\b"))))
  ) %>%
  unnest(matched)

exp_joined <- exp_joined %>%
  mutate(logCoord = log(Coord + 1))  %>%
  mutate(logCoord_z = scale(logCoord)[, 1])

# get by item means
avgs <- exp_joined %>%
  group_by(itemNum, suffix, is_sa, logCoord_z, Coord) %>%
  dplyr::summarize(
    item_mean = mean(as.numeric(as.character(rating)), na.rm = TRUE),
    item_se = sd(as.numeric(as.character(rating)), na.rm = TRUE) / sqrt(n()),
    item_n = n(),
    item_ci = 1.96 * item_se
  ) %>%
  ungroup()

avgs$suffix <- factor(avgs$suffix, levels = c("-sIz", "-cI", "-lI", "-lIk"))
avgs <- avgs %>%
  mutate(
    is_sa = case_when(
      is_sa == "Suspended" ~ "with SA",
      is_sa == "Not Suspended" ~ "without SA"
    )
  )

ggplot(avgs, aes(x = logCoord_z, y = item_mean, group = is_sa)) +
  geom_point(aes(shape = is_sa, color = is_sa), alpha = 0.5) +
  geom_smooth(aes(color = is_sa), method = "lm", se = FALSE, size = 0.5) +
  scale_color_manual(values = c("with SA" = "#1f78b4", "without SA" = "#ff7f00")) +
  labs(
    x = "Frequency (z-scored)",
    y = "Mean(Rating)",
    color = ""
  ) +
  guides(shape = "none") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  ) +
  facet_wrap(~suffix, ncol = 4)

ggplot(avgs, aes(x = logCoord_z, y = item_mean, group = is_sa)) +
  geom_point(aes(shape = is_sa, color = is_sa), alpha = 0.5) +
  geom_smooth(aes(color = is_sa), method = "lm", se = FALSE, size = 0.5) +
  scale_color_manual(values = c("with SA" = "#1f78b4", "without SA" = "#ff7f00")) +
  labs(
    x = "Frequency (z-scored)",
    y = "Mean(Rating)",
    color = ""
  ) +
  theme_minimal() +
  guides(shape = "none") +
  theme(
    legend.position = "right",
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    panel.grid.minor = element_blank(),
    axis.ticks.y = element_line(color = "black", size = 0.5),
    axis.ticks.x = element_line(color = "black", size = 0.5),
    panel.border = element_rect(color = "black", size = 0.5, fill = "transparent"), 
    strip.background = element_rect(color = "black")
  ) +
  facet_wrap(~suffix, ncol = 4)

avgs <- avgs %>%
  mutate(Item_ordered = factor(itemNum, levels = unique(itemNum[order(Coord)])))
  
ggplot(avgs, aes(x = Item_ordered, y = item_mean, group = is_sa)) +
  geom_point(aes(shape = is_sa, color = is_sa), alpha = 0.5,
    position = position_dodge(width = 0.5)) +
  geom_errorbar(
    aes(ymin = item_mean - item_se, ymax = item_mean + item_se, color = is_sa),
    width = 0.3,  # wider than a tick, still not full bars
    alpha = 0.5,
    position = position_dodge(width = 0.5)
  ) +
  geom_smooth(aes(color = is_sa), method = "lm", se = FALSE, size = 0.5) +
  scale_color_manual(values = c("SA" = "#1f78b4", "without SA" = "#ff7f00")) +
  labs(
    x = "Binomials order from Low (left) to High frequency",
    y = "Mean(Rating)",
    color = ""
  ) +
  guides(shape = "none") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  ) +
  facet_wrap(~suffix, ncol = 4)
```

## By subject plots for ratings

```{r, warning=FALSE, message=FALSE}
exp <- exp %>%
  group_by(completionCode) %>%
  mutate(subject = paste0("S", cur_group_id())) %>%
  ungroup()

# Summary data
summary_data <- exp %>%
  count(subject, suffix, is_sa, rating, name = "count")

summary_data_adjusted <- summary_data %>%
  group_by(subject, suffix, is_sa) %>%
  mutate(
    cumulative_count = cumsum(count) / sum(count),
    middle_of_bar = (cumsum(count) - count / 2) / sum(count)
  ) %>%
  ungroup()
```

::: {.panel-tabset}

```{r}
#| echo: false
#| output: asis

subject_ids <- unique(summary_data$subject)
subject_groups <- split(subject_ids, ceiling(seq_along(subject_ids) / 8))


for (i in seq_along(subject_groups)) {
  group_subjects <- subject_groups[[i]]
  title <- paste0(group_subjects[1], "–", group_subjects[length(group_subjects)])
  cat(paste0("### ", title, " {.tab}\n\n"))

  plot_data <- summary_data %>% filter(subject %in% group_subjects)
  label_data <- summary_data_adjusted %>% filter(subject %in% group_subjects)

  p <- ggplot(plot_data, aes(x = suffix, y = count, fill = rating)) +
    geom_bar(stat = "identity", position = "fill", color = "black", width = 0.8) +
    scale_fill_brewer(palette = "Spectral", direction = -1) +
    facet_wrap(~ subject + is_sa, ncol = 4) +  
    scale_y_continuous(labels = NULL, breaks = NULL) +
    labs(
      x = "Suffix",
      y = NULL,
      fill = "Rating"
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(size = 8, face = "bold"),
      axis.text.y = element_blank(),
      strip.text = element_text(size = 8, face = "bold")
    )

  print(p)
  cat("\n\n")
}

```
:::


## By item plots for ratings

```{r}
exp <- exp %>%
  group_by(itemNum) %>%
  mutate(item = paste0("I", cur_group_id())) %>%
  ungroup()

# Summary data
summary_data <- exp %>%
  count(item, suffix, is_sa, rating, name = "count")

summary_data_adjusted <- summary_data %>%
  group_by(item, suffix, is_sa) %>%
  mutate(
    cumulative_count = cumsum(count) / sum(count),
    middle_of_bar = (cumsum(count) - count / 2) / sum(count)
  ) %>%
  ungroup()

```

::: {.panel-tabset}

```{r}
#| echo: false
#| output: asis
# Re-split into groups of 8
item_ids <- unique(summary_data$item)
item_groups <- split(item_ids, ceiling(seq_along(item_ids) / 8))


for (i in seq_along(item_groups)) {
  group_items <- item_groups[[i]]
  title <- paste0(group_items[1], "–", group_items[length(group_items)])
  cat(paste0("### ", title, " {.tab}\n\n"))

  plot_data <- summary_data %>% filter(item %in% group_items)
  label_data <- summary_data_adjusted %>% filter(item %in% group_items)

  p <- ggplot(plot_data, aes(x = suffix, y = count, fill = rating)) +
    geom_bar(stat = "identity", position = "fill", color = "black", width = 0.8) +
    scale_fill_brewer(palette = "Spectral", direction = -1) +
    facet_wrap(~ item + is_sa, ncol = 4) +  
    scale_y_continuous(labels = NULL, breaks = NULL) +
    labs(
      x = "Suffix",
      y = NULL,
      fill = "Rating"
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(size = 8, face = "bold"),
      axis.text.y = element_blank(),
      strip.text = element_text(size = 8, face = "bold")
    )

  print(p)
  cat("\n\n")
}

```
:::
